-- Counting missing values
SELECT
  COUNT(*) AS total_rows,
  COUNT(description) AS count_description,
  COUNT(listing_price) AS count_listing_price,
  COUNT(last_visited) AS count_last_visited
FROM info
LEFT JOIN finance ON info.product_id = finance.product_id
LEFT JOIN traffic ON info.product_id = traffic.product_id;

-- Nike vs Adidas pricing
SELECT
  b.brand,
  f.listing_price::integer,
  COUNT(f.*) AS count
FROM finance AS f
INNER JOIN brands AS b ON f.product_id = b.product_id
WHERE f.listing_price > 0
GROUP BY b.brand, f.listing_price
ORDER BY f.listing_price DESC;

-- Labeling price ranges
SELECT
  b.brand,
  COUNT(f.*) AS count,
  SUM(f.revenue) AS total_revenue,
  CASE
    WHEN f.listing_price < 42 THEN 'Budget'
    WHEN f.listing_price >= 42 AND f.listing_price < 74 THEN 'Average'
    WHEN f.listing_price >= 74 AND f.listing_price < 129 THEN 'Expensive'
    ELSE 'Elite'
  END AS price_category
FROM finance AS f
JOIN brands AS b ON f.product_id = b.product_id
WHERE b.brand IS NOT NULL
GROUP BY b.brand, price_category
ORDER BY total_revenue DESC;

-- Average discount by brand
SELECT
  b.brand,
  AVG(f.discount) * 100 AS average_discount
FROM brands AS b
INNER JOIN finance AS f ON b.product_id = f.product_id
GROUP BY b.brand
HAVING b.brand IS NOT NULL
ORDER BY average_discount;

-- Correlation between revenue and reviews
SELECT
  CORR(r.reviews, f.revenue) AS review_revenue_corr
FROM reviews AS r
JOIN finance AS f ON r.product_id = f.product_id;

-- Ratings and reviews by product description length
SELECT
  TRUNC(LENGTH(i.description), -2) AS description_length,
  ROUND(AVG(r.rating::numeric), 2) AS average_rating
FROM info AS i
JOIN reviews AS r ON i.product_id = r.product_id
WHERE i.description IS NOT NULL
GROUP BY description_length
ORDER BY description_length;

-- Reviews by month and brand
SELECT
  b.brand,
  DATE_PART('month', t.last_visited) AS month,
  COUNT(r.*) AS num_reviews
FROM brands AS b
INNER JOIN traffic AS t ON b.product_id = t.product_id
INNER JOIN reviews AS r ON t.product_id = r.product_id
GROUP BY b.brand, month
HAVING b.brand IS NOT NULL
  AND DATE_PART('month', t.last_visited) IS NOT NULL
ORDER BY b.brand, month;

-- Footwear product performance
WITH footwear AS (
  SELECT
    description,
    revenue
  FROM info
  INNER JOIN finance ON info.product_id = finance.product_id
  WHERE
    description ILIKE '%shoe%'
    OR description ILIKE '%trainer%'
    OR description ILIKE '%foot%'
    AND description IS NOT NULL
)
SELECT
  COUNT(*) AS num_footwear_products,
  ROUND(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY revenue), 2) AS median_footwear_revenue
FROM footwear;

-- Clothing product performance
WITH footwear AS (
  SELECT
    description,
    revenue
  FROM info
  INNER JOIN finance ON info.product_id = finance.product_id
  WHERE
    description ILIKE '%shoe%'
    OR description ILIKE '%trainer%'
    OR description ILIKE '%foot%'
    AND description IS NOT NULL
)
SELECT
  COUNT(*) AS num_clothing_products,
  ROUND(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY f.revenue), 2) AS median_clothing_revenue
FROM info AS i
INNER JOIN finance AS f ON i.product_id = f.product_id
WHERE i.description NOT IN (SELECT description FROM footwear);
